/*
 * This file is generated by jOOQ.
*/
package de.dangoe.freda.jooq.generated.public.tables.records


import de.dangoe.freda.jooq.generated.public.tables.Accounts

import java.lang.Long
import java.lang.String
import java.sql.Timestamp

import javax.annotation.Generated

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record3
import org.jooq.Row3
import org.jooq.impl.UpdatableRecordImpl

import scala.Array


/**
 * This class is generated by jOOQ.
 */
@Generated(
  value = Array(
    "http://www.jooq.org",
    "jOOQ version:3.9.4"
  ),
  comments = "This class is generated by jOOQ"
)
class AccountsRecord extends UpdatableRecordImpl[AccountsRecord](Accounts.ACCOUNTS) with Record3[Long, String, Timestamp] {

  /**
   * Setter for <code>PUBLIC.ACCOUNTS.USER</code>.
   */
  def setUser(value : Long) : Unit = {
    set(0, value)
  }

  /**
   * Getter for <code>PUBLIC.ACCOUNTS.USER</code>.
   */
  def getUser : Long = {
    val r = get(0)
    if (r == null) null else r.asInstanceOf[Long]
  }

  /**
   * Setter for <code>PUBLIC.ACCOUNTS.PASSWORD</code>.
   */
  def setPassword(value : String) : Unit = {
    set(1, value)
  }

  /**
   * Getter for <code>PUBLIC.ACCOUNTS.PASSWORD</code>.
   */
  def getPassword : String = {
    val r = get(1)
    if (r == null) null else r.asInstanceOf[String]
  }

  /**
   * Setter for <code>PUBLIC.ACCOUNTS.CREATED_AT</code>.
   */
  def setCreatedAt(value : Timestamp) : Unit = {
    set(2, value)
  }

  /**
   * Getter for <code>PUBLIC.ACCOUNTS.CREATED_AT</code>.
   */
  def getCreatedAt : Timestamp = {
    val r = get(2)
    if (r == null) null else r.asInstanceOf[Timestamp]
  }

  // -------------------------------------------------------------------------
  // Primary key information
  // -------------------------------------------------------------------------
  override def key : Record1[Long] = {
    return super.key.asInstanceOf[ Record1[Long] ]
  }

  // -------------------------------------------------------------------------
  // Record3 type implementation
  // -------------------------------------------------------------------------

  override def fieldsRow : Row3[Long, String, Timestamp] = {
    super.fieldsRow.asInstanceOf[ Row3[Long, String, Timestamp] ]
  }

  override def valuesRow : Row3[Long, String, Timestamp] = {
    super.valuesRow.asInstanceOf[ Row3[Long, String, Timestamp] ]
  }
  override def field1 : Field[Long] = Accounts.ACCOUNTS.USER
  override def field2 : Field[String] = Accounts.ACCOUNTS.PASSWORD
  override def field3 : Field[Timestamp] = Accounts.ACCOUNTS.CREATED_AT
  override def value1 : Long = getUser
  override def value2 : String = getPassword
  override def value3 : Timestamp = getCreatedAt

  override def value1(value : Long) : AccountsRecord = {
    setUser(value)
    this
  }

  override def value2(value : String) : AccountsRecord = {
    setPassword(value)
    this
  }

  override def value3(value : Timestamp) : AccountsRecord = {
    setCreatedAt(value)
    this
  }

  override def values(value1 : Long, value2 : String, value3 : Timestamp) : AccountsRecord = {
    this.value1(value1)
    this.value2(value2)
    this.value3(value3)
    this
  }

  /**
   * Create a detached, initialised AccountsRecord
   */
  def this(user : Long, password : String, createdAt : Timestamp) = {
    this()

    set(0, user)
    set(1, password)
    set(2, createdAt)
  }
}
